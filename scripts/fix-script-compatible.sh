#!/bin/bash

# =============================================================================
# Script Compatible con Versiones Anteriores de GitHub CLI
# =============================================================================

REPO_OWNER="agustinabusto"
REPO_NAME="mcp-poc"

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîç Script compatible con GitHub CLI versiones anteriores...${NC}"

# =============================================================================
# 1. VERIFICAR VERSI√ìN DE GITHUB CLI
# =============================================================================

echo -e "${YELLOW}üìã Verificando versi√≥n de GitHub CLI...${NC}"
gh_version=$(gh --version | head -n1)
echo -e "${BLUE}Versi√≥n: $gh_version${NC}"

# =============================================================================
# 2. VERIFICAR AUTENTICACI√ìN
# =============================================================================

echo -e "${YELLOW}üîê Verificando autenticaci√≥n...${NC}"
if ! gh auth status &> /dev/null; then
    echo -e "${RED}‚ùå No est√°s autenticado en GitHub${NC}"
    echo -e "${BLUE}üí° Ejecuta: gh auth login${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ Autenticaci√≥n exitosa${NC}"
fi

# =============================================================================
# 3. VERIFICAR MILESTONES EXISTENTES
# =============================================================================

echo -e "${YELLOW}üìä Verificando milestones existentes...${NC}"
milestone_count=$(gh milestone list --repo "$REPO_OWNER/$REPO_NAME" --state all 2>/dev/null | wc -l)

if [ "$milestone_count" -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è No hay milestones. Creando...${NC}"
    
    # Crear milestones uno por uno
    echo -e "${BLUE}üìå Creando Milestone 1...${NC}"
    gh milestone create --repo "$REPO_OWNER/$REPO_NAME" --title "Milestone 1: Monitor B√°sico AFIP" --description "Funcionalidades b√°sicas de monitoreo fiscal" --due-date "2025-07-24" 2>/dev/null || echo -e "${YELLOW}Ya existe${NC}"
    
    echo -e "${BLUE}üìå Creando Milestone 2...${NC}"
    gh milestone create --repo "$REPO_OWNER/$REPO_NAME" --title "Milestone 2: Sistema de Alertas" --description "Sistema completo de alertas y notificaciones" --due-date "2025-08-07" 2>/dev/null || echo -e "${YELLOW}Ya existe${NC}"
    
    echo -e "${BLUE}üìå Creando Milestone 3...${NC}"
    gh milestone create --repo "$REPO_OWNER/$REPO_NAME" --title "Milestone 3: Compliance Checker" --description "Motor de compliance y scoring" --due-date "2025-08-21" 2>/dev/null || echo -e "${YELLOW}Ya existe${NC}"
    
    echo -e "${BLUE}üìå Creando Milestone 4...${NC}"
    gh milestone create --repo "$REPO_OWNER/$REPO_NAME" --title "Milestone 4: Dashboard Avanzado" --description "Interfaz completa y responsive" --due-date "2025-09-04" 2>/dev/null || echo -e "${YELLOW}Ya existe${NC}"
    
    echo -e "${BLUE}üìå Creando Milestone 5...${NC}"
    gh milestone create --repo "$REPO_OWNER/$REPO_NAME" --title "Milestone 5: Arquitectura MCP" --description "Implementaci√≥n completa de MCP" --due-date "2025-09-18" 2>/dev/null || echo -e "${YELLOW}Ya existe${NC}"
    
    echo -e "${BLUE}üìå Creando Milestone 6...${NC}"
    gh milestone create --repo "$REPO_OWNER/$REPO_NAME" --title "Milestone 6: Configuraci√≥n y APIs" --description "Administraci√≥n y APIs externas" --due-date "2025-10-02" 2>/dev/null || echo -e "${YELLOW}Ya existe${NC}"
else
    echo -e "${GREEN}‚úÖ Milestones ya existen ($milestone_count encontrados)${NC}"
fi

# =============================================================================
# 4. MOSTRAR MILESTONES FINALES
# =============================================================================

echo -e "${YELLOW}üìã Milestones disponibles:${NC}"
gh milestone list --repo "$REPO_OWNER/$REPO_NAME" --state all

# =============================================================================
# 5. CREAR PROYECTO (VERSI√ìN COMPATIBLE)
# =============================================================================

echo -e "${YELLOW}üìã Creando proyecto (versi√≥n compatible)...${NC}"

PROJECT_TITLE="AFIP Monitor MCP - Development Roadmap"

echo -e "${BLUE}üìù Creando proyecto: $PROJECT_TITLE${NC}"
if project_output=$(gh project create --owner "$REPO_OWNER" --title "$PROJECT_TITLE" 2>&1); then
    echo -e "${GREEN}‚úÖ Proyecto creado exitosamente${NC}"
    echo "$project_output"
else
    echo -e "${YELLOW}‚ö†Ô∏è Error al crear proyecto o ya existe:${NC}"
    echo "$project_output"
fi

# =============================================================================
# 6. LISTAR PROYECTOS EXISTENTES
# =============================================================================

echo -e "${YELLOW}üìã Proyectos existentes:${NC}"
gh project list --owner "$REPO_OWNER" 2>/dev/null || echo -e "${YELLOW}No se pueden listar proyectos o no existen${NC}"

# =============================================================================
# 7. FUNCI√ìN PARA CREAR ISSUES SIMPLE
# =============================================================================

create_issue_simple() {
    local title=$1
    local body=$2
    local labels=$3
    local milestone=$4
    
    echo -e "${BLUE}üìù Creando: $title${NC}"
    
    # Crear issue b√°sico
    local issue_number
    if issue_number=$(gh issue create --repo "$REPO_OWNER/$REPO_NAME" \
        --title "$title" \
        --body "$body" \
        --label "$labels" 2>/dev/null); then
        
        echo -e "${GREEN}‚úÖ Issue #$issue_number creado${NC}"
        
        # Intentar asignar milestone si se especific√≥
        if [[ -n "$milestone" ]]; then
            if gh issue edit "$issue_number" --repo "$REPO_OWNER/$REPO_NAME" --milestone "$milestone" 2>/dev/null; then
                echo -e "${GREEN}‚úÖ Milestone asignado${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è No se pudo asignar milestone${NC}"
            fi
        fi
    else
        echo -e "${RED}‚ùå Error creando issue${NC}"
    fi
}

# =============================================================================
# 8. CREAR TODAS LAS HISTORIAS DE USUARIO
# =============================================================================

echo -e "${YELLOW}üìñ Creando todas las historias de usuario...${NC}"

# HU-001: Verificaci√≥n de Estado Fiscal
create_issue_simple "HU-001: Verificaci√≥n de Estado Fiscal" \
    "## Historia de Usuario
**Como** usuario del sistema
**Quiero** verificar autom√°ticamente el estado fiscal de un contribuyente
**Para** mantener el control del compliance fiscal en tiempo real

## Criterios de Aceptaci√≥n
- [ ] CA-001: El sistema debe consultar autom√°ticamente el estado en AFIP
- [ ] CA-002: Debe mostrar informaci√≥n detallada en menos de 5 segundos
- [ ] CA-003: Debe manejar errores y mostrar mensajes claros
- [ ] CA-004: Debe guardar el resultado en el hist√≥rico

## Informaci√≥n Adicional
- **M√≥dulo:** Monitor Autom√°tico AFIP
- **Prioridad:** Alta
- **Estimaci√≥n:** 8 puntos de historia
- **Sprint:** Sprint 1" \
    "user-story,monitor-afip,priority-high" \
    "Milestone 1: Monitor B√°sico AFIP"

# HU-002: Control de Inscripciones
create_issue_simple "HU-002: Control de Inscripciones" \
    "## Historia de Usuario
**Como** usuario del sistema
**Quiero** monitorear las inscripciones de IVA, Ganancias y Seguridad Social
**Para** asegurar que el contribuyente mantenga todas sus inscripciones al d√≠a

## Criterios de Aceptaci√≥n
- [ ] CA-001: Verificar autom√°ticamente inscripciones en IVA, Ganancias y Seguridad Social
- [ ] CA-002: Mostrar estado actual, fechas y categor√≠as de cada inscripci√≥n
- [ ] CA-003: Detectar y alertar sobre inscripciones inactivas o suspendidas
- [ ] CA-004: Notificar cambios en inscripciones y actualizar dashboard

## Informaci√≥n Adicional
- **M√≥dulo:** Monitor Autom√°tico AFIP
- **Prioridad:** Alta
- **Estimaci√≥n:** 5 puntos de historia
- **Sprint:** Sprint 1" \
    "user-story,monitor-afip,priority-high" \
    "Milestone 1: Monitor B√°sico AFIP"

# HU-003: Seguimiento de Declaraciones
create_issue_simple "HU-003: Seguimiento de Declaraciones" \
    "## Historia de Usuario
**Como** usuario del sistema
**Quiero** controlar autom√°ticamente las presentaciones de declaraciones
**Para** evitar incumplimientos en las obligaciones fiscales

## Criterios de Aceptaci√≥n
- [ ] CA-001: Identificar autom√°ticamente obligaciones fiscales por tipo de contribuyente
- [ ] CA-002: Mostrar estado de presentaciones con fechas y importes
- [ ] CA-003: Detectar incumplimientos y generar alertas autom√°ticas
- [ ] CA-004: Enviar alertas preventivas antes de vencimientos

## Informaci√≥n Adicional
- **M√≥dulo:** Monitor Autom√°tico AFIP
- **Prioridad:** Alta
- **Estimaci√≥n:** 8 puntos de historia
- **Sprint:** Sprint 2" \
    "user-story,monitor-afip,priority-high" \
    "Milestone 1: Monitor B√°sico AFIP"

# HU-004: Detecci√≥n de Cambios
create_issue_simple "HU-004: Detecci√≥n de Cambios" \
    "## Historia de Usuario
**Como** usuario del sistema
**Quiero** recibir alertas por modificaciones en reg√≠menes fiscales
**Para** estar informado de cambios que puedan afectar el compliance

## Criterios de Aceptaci√≥n
- [ ] CA-001: Monitorear y detectar cambios en reg√≠menes fiscales
- [ ] CA-002: Detectar cambios en categor√≠as, actividades y domicilio fiscal
- [ ] CA-003: Notificar inmediatamente sobre cambios detectados
- [ ] CA-004: Mantener hist√≥rico completo de cambios

## Informaci√≥n Adicional
- **M√≥dulo:** Monitor Autom√°tico AFIP
- **Prioridad:** Media
- **Estimaci√≥n:** 5 puntos de historia
- **Sprint:** Sprint 2" \
    "user-story,monitor-afip,priority-medium" \
    "Milestone 1: Monitor B√°sico AFIP"

# HU-005: Alertas por Severidad
create_issue_simple "HU-005: Alertas por Severidad" \
    "## Historia de Usuario
**Como** usuario del sistema
**Quiero** recibir alertas clasificadas por severidad (Cr√≠tica, Alta, Media, Baja, Informativa)
**Para** priorizar las acciones seg√∫n la importancia del evento

## Criterios de Aceptaci√≥n
- [ ] CA-001: Asignar autom√°ticamente severidad seg√∫n tipo de evento
- [ ] CA-002: Visualizaci√≥n diferenciada por severidad con colores e √≠conos
- [ ] CA-003: Permitir gesti√≥n y filtrado de alertas por severidad
- [ ] CA-004: Configuraci√≥n personalizada de criterios de severidad

## Informaci√≥n Adicional
- **M√≥dulo:** Sistema de Alertas
- **Prioridad:** Alta
- **Estimaci√≥n:** 8 puntos de historia
- **Sprint:** Sprint 2" \
    "user-story,alertas,priority-high" \
    "Milestone 2: Sistema de Alertas"

# Continuar con todas las dem√°s historias...

# HU-006: M√∫ltiples Canales de Notificaci√≥n
create_issue_simple "HU-006: M√∫ltiples Canales de Notificaci√≥n" \
    "## Historia de Usuario
**Como** usuario del sistema
**Quiero** recibir notificaciones por Dashboard, Email, SMS y WebSocket
**Para** estar informado a trav√©s de diferentes medios de comunicaci√≥n

## Criterios de Aceptaci√≥n
- [ ] CA-001: Configurar canales de notificaci√≥n independientemente
- [ ] CA-002: Dashboard con notificaciones en tiempo real
- [ ] CA-003: Notificaciones por email con formato profesional
- [ ] CA-004: Notificaciones por SMS para alertas cr√≠ticas

## Informaci√≥n Adicional
- **M√≥dulo:** Sistema de Alertas
- **Prioridad:** Alta
- **Estimaci√≥n:** 8 puntos de historia
- **Sprint:** Sprint 3" \
    "user-story,alertas,priority-high" \
    "Milestone 2: Sistema de Alertas"

echo -e "${GREEN}‚úÖ Primeras 6 historias de usuario creadas!${NC}"
echo -e "${BLUE}üìä Para ver los issues creados:${NC}"
echo -e "  gh issue list --repo $REPO_OWNER/$REPO_NAME"

# =============================================================================
# 9. MOSTRAR RESUMEN
# =============================================================================

echo -e "${GREEN}üéâ Configuraci√≥n completada (compatible)!${NC}"
echo -e "${BLUE}üìä Resumen:${NC}"
echo -e "   ‚Ä¢ ‚úÖ Milestones verificados/creados"
echo -e "   ‚Ä¢ ‚úÖ Labels ya exist√≠an"
echo -e "   ‚Ä¢ ‚úÖ Proyecto creado/verificado"
echo -e "   ‚Ä¢ ‚úÖ Primeras 6 historias de usuario creadas"

echo ""
echo -e "${YELLOW}üìã Comandos de verificaci√≥n:${NC}"
echo -e "   gh milestone list --repo $REPO_OWNER/$REPO_NAME"
echo -e "   gh issue list --repo $REPO_OWNER/$REPO_NAME"
echo -e "   gh project list --owner $REPO_OWNER"

echo ""
echo -e "${BLUE}üîó Enlaces:${NC}"
echo -e "   ‚Ä¢ Issues: https://github.com/$REPO_OWNER/$REPO_NAME/issues"
echo -e "   ‚Ä¢ Milestones: https://github.com/$REPO_OWNER/$REPO_NAME/milestones"
echo -e "   ‚Ä¢ Projects: https://github.com/$REPO_OWNER/$REPO_NAME/projects"