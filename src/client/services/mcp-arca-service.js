// src/client/services/mcp-arca-service.js
/**
 * Servicio especializado para integraci√≥n con ARCA usando MCP
 */

import { getMCPClient } from './mcp-client.js';

class MCPArcaService {
    constructor() {
        this.mcpClient = null;
        this.initialized = false;
    }

    async initialize() {
        try {
            this.mcpClient = await getMCPClient();
            this.initialized = true;
            console.log('‚úÖ MCP ARCA Service inicializado');
        } catch (error) {
            console.error('‚ùå Error inicializando MCP ARCA Service:', error);
            throw error;
        }
    }

    /**
 * Obtiene las facturas enviadas en una fecha espec√≠fica
 * @param {string} date - Fecha en formato YYYY-MM-DD
 * @returns {Promise<Array>} Lista de facturas del d√≠a
 */
    async getTodayInvoices(date = null) {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            const targetDate = date || new Date().toISOString().split('T')[0];
            console.log(`üìã Obteniendo facturas del d√≠a: ${targetDate}`);

            // En producci√≥n, aqu√≠ har√≠as una llamada real a la API de ARCA/base de datos
            // Por ahora, simulamos la respuesta con datos de ejemplo

            const mockInvoices = [
                {
                    id: `inv_${Date.now()}_1`,
                    number: '0001-00000123',
                    businessName: 'Tech Solutions S.A.',
                    cuit: '30-12345678-9',
                    total: 125000.50,
                    type: 'A',
                    date: new Date().toISOString(),
                    sentAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                    status: 'OK',
                    arcaId: 'ARCA-2025-12345',
                    arcaResponse: {
                        cae: '75123456789012',
                        validUntil: '2025-08-25',
                        message: 'Factura autorizada correctamente'
                    }
                },
                {
                    id: `inv_${Date.now()}_2`,
                    number: '0001-00000124',
                    businessName: 'Comercial del Norte Ltda.',
                    cuit: '33-87654321-9',
                    total: 89750.25,
                    type: 'B',
                    date: new Date().toISOString(),
                    sentAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
                    status: 'ERROR',
                    errorDetails: 'CUIT del receptor no v√°lido en AFIP',
                    arcaResponse: {
                        error: 'Validation Error: Invalid CUIT',
                        errorCode: 'E001'
                    }
                },
                {
                    id: `inv_${Date.now()}_3`,
                    number: '0001-00000125',
                    businessName: 'Servicios Integrales SRL',
                    cuit: '30-55555555-5',
                    total: 45200.75,
                    type: 'C',
                    date: new Date().toISOString(),
                    sentAt: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
                    status: 'PENDING',
                    arcaId: 'ARCA-2025-12347',
                    arcaResponse: {
                        message: 'Factura en proceso de validaci√≥n'
                    }
                },
                {
                    id: `inv_${Date.now()}_4`,
                    number: '0001-00000126',
                    businessName: 'Distribuidora Los Andes S.A.',
                    cuit: '30-99999999-9',
                    total: 78450.00,
                    type: 'A',
                    date: new Date().toISOString(),
                    sentAt: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
                    status: 'OK',
                    arcaId: 'ARCA-2025-12348',
                    arcaResponse: {
                        cae: '75987654321098',
                        validUntil: '2025-08-25',
                        message: 'Factura autorizada correctamente'
                    }
                },
                {
                    id: `inv_${Date.now()}_5`,
                    number: '0001-00000127',
                    businessName: 'Constructora del Sur SRL',
                    cuit: '30-11111111-1',
                    total: 234567.89,
                    type: 'A',
                    date: new Date().toISOString(),
                    sentAt: new Date(Date.now() - 45 * 60 * 1000).toISOString(),
                    status: 'ERROR',
                    errorDetails: 'L√≠mite de comprobantes diarios excedido',
                    arcaResponse: {
                        error: 'Daily invoice limit exceeded',
                        errorCode: 'E002'
                    }
                }
            ];

            // Simular delay de red
            await new Promise(resolve => setTimeout(resolve, 800));

            console.log(`‚úÖ Facturas obtenidas: ${mockInvoices.length} registros`);

            return mockInvoices;

        } catch (error) {
            console.error('‚ùå Error obteniendo facturas del d√≠a:', error);
            throw new Error(`Error obteniendo facturas: ${error.message}`);
        }
    }

    /**
     * Obtiene estad√≠sticas de facturas para el dashboard
     * @returns {Promise<Object>} Estad√≠sticas de facturas
     */
    async getArcaStats() {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            console.log('üìä Obteniendo estad√≠sticas ARCA...');

            // En producci√≥n, esto vendr√≠a de tu base de datos o API de ARCA
            const today = new Date().toISOString().split('T')[0];
            const invoices = await this.getTodayInvoices(today);

            // Calcular estad√≠sticas basadas en las facturas del d√≠a
            const stats = {
                today: {
                    sent: invoices.length,
                    authorized: invoices.filter(inv => inv.status === 'OK').length,
                    rejected: invoices.filter(inv => inv.status === 'ERROR').length,
                    pending: invoices.filter(inv => inv.status === 'PENDING').length
                },
                thisMonth: {
                    sent: Math.floor(Math.random() * 500) + 200,
                    authorized: Math.floor(Math.random() * 450) + 180,
                    rejected: Math.floor(Math.random() * 30) + 5,
                    pending: Math.floor(Math.random() * 20) + 2
                },
                connection: {
                    status: 'connected',
                    lastSync: new Date().toISOString(),
                    responseTime: Math.floor(Math.random() * 500) + 100
                }
            };

            console.log('‚úÖ Estad√≠sticas ARCA obtenidas:', stats);
            return stats;

        } catch (error) {
            console.error('‚ùå Error obteniendo estad√≠sticas ARCA:', error);

            // Retornar estad√≠sticas por defecto en caso de error
            return {
                today: { sent: 0, authorized: 0, rejected: 0, pending: 0 },
                thisMonth: { sent: 0, authorized: 0, rejected: 0, pending: 0 },
                connection: {
                    status: 'error',
                    lastSync: null,
                    responseTime: null
                }
            };
        }
    }

    /**
     * Reintenta el env√≠o de una factura que fall√≥
     * @param {string} invoiceId - ID de la factura a reintentar
     * @returns {Promise<Object>} Resultado del reintento
     */
    async retryInvoice(invoiceId) {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            console.log(`üîÑ Reintentando env√≠o de factura: ${invoiceId}`);

            // Simular reintento (en producci√≥n, buscar la factura y reenviarla)
            await new Promise(resolve => setTimeout(resolve, 2000));

            // Simular √©xito en el 80% de los casos
            const success = Math.random() > 0.2;

            if (success) {
                const result = {
                    success: true,
                    arcaId: `ARCA-RETRY-${Date.now()}`,
                    cae: `CAE-${Math.floor(Math.random() * 100000000)}`,
                    validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
                    message: 'Factura autorizada en reintento'
                };

                console.log(`‚úÖ Reintento exitoso para factura ${invoiceId}:`, result);
                return result;
            } else {
                throw new Error('Persistencia en error de validaci√≥n');
            }

        } catch (error) {
            console.error(`‚ùå Error en reintento de factura ${invoiceId}:`, error);
            throw new Error(`Reintento fallido: ${error.message}`);
        }
    }

    /**
     * Obtiene el detalle completo de una factura por su ID
     * @param {string} invoiceId - ID de la factura
     * @returns {Promise<Object>} Detalle completo de la factura
     */
    async getInvoiceDetail(invoiceId) {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            console.log(`üìÑ Obteniendo detalle de factura: ${invoiceId}`);

            // En producci√≥n, esto vendr√≠a de tu base de datos
            const mockDetail = {
                id: invoiceId,
                number: '0001-00000123',
                businessName: 'Tech Solutions S.A.',
                cuit: '30-12345678-9',
                total: 125000.50,
                type: 'A',
                date: new Date().toISOString(),
                sentAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                status: 'OK',
                arcaId: 'ARCA-2025-12345',
                items: [
                    {
                        description: 'Desarrollo de software',
                        quantity: 1,
                        unitPrice: 103305.79,
                        total: 103305.79,
                        taxAmount: 21694.21
                    }
                ],
                taxes: {
                    iva21: 21694.21,
                    total: 21694.21
                },
                arcaResponse: {
                    cae: '75123456789012',
                    validUntil: '2025-08-25',
                    message: 'Factura autorizada correctamente',
                    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
                },
                history: [
                    {
                        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                        action: 'SENT_TO_ARCA',
                        status: 'OK',
                        message: 'Factura enviada a ARCA correctamente'
                    },
                    {
                        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000 + 30000).toISOString(),
                        action: 'ARCA_RESPONSE',
                        status: 'OK',
                        message: 'Respuesta recibida de ARCA - CAE autorizado'
                    }
                ]
            };

            // Simular delay de red
            await new Promise(resolve => setTimeout(resolve, 500));

            console.log(`‚úÖ Detalle de factura obtenido:`, mockDetail);
            return mockDetail;

        } catch (error) {
            console.error(`‚ùå Error obteniendo detalle de factura ${invoiceId}:`, error);
            throw new Error(`Error obteniendo detalle: ${error.message}`);
        }
    }

    /**
     * Obtiene facturas filtradas por criterios espec√≠ficos
     * @param {Object} filters - Filtros de b√∫squeda
     * @returns {Promise<Array>} Lista de facturas filtradas
     */
    async getFilteredInvoices(filters = {}) {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            const {
                dateFrom,
                dateTo,
                status,
                businessName,
                invoiceNumber,
                limit = 50,
                offset = 0
            } = filters;

            console.log('üîç Obteniendo facturas con filtros:', filters);

            // En producci√≥n, esto ser√≠a una consulta a tu base de datos
            let allInvoices = await this.getTodayInvoices();

            // Aplicar filtros
            let filteredInvoices = allInvoices;

            if (status && status !== 'all') {
                filteredInvoices = filteredInvoices.filter(inv => inv.status === status);
            }

            if (businessName) {
                filteredInvoices = filteredInvoices.filter(inv =>
                    inv.businessName.toLowerCase().includes(businessName.toLowerCase())
                );
            }

            if (invoiceNumber) {
                filteredInvoices = filteredInvoices.filter(inv =>
                    inv.number.includes(invoiceNumber)
                );
            }

            // Aplicar paginaci√≥n
            const paginatedInvoices = filteredInvoices.slice(offset, offset + limit);

            const result = {
                invoices: paginatedInvoices,
                total: filteredInvoices.length,
                page: Math.floor(offset / limit) + 1,
                totalPages: Math.ceil(filteredInvoices.length / limit),
                hasMore: (offset + limit) < filteredInvoices.length
            };

            console.log(`‚úÖ Facturas filtradas obtenidas: ${result.invoices.length}/${result.total}`);
            return result;

        } catch (error) {
            console.error('‚ùå Error obteniendo facturas filtradas:', error);
            throw new Error(`Error en b√∫squeda: ${error.message}`);
        }
    }

    /**
     * Exporta facturas a diferentes formatos
     * @param {Array} invoiceIds - IDs de las facturas a exportar
     * @param {string} format - Formato de exportaci√≥n ('csv', 'excel', 'pdf')
     * @returns {Promise<Object>} Datos de exportaci√≥n
     */
    async exportInvoices(invoiceIds, format = 'csv') {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            console.log(`üì§ Exportando ${invoiceIds.length} facturas en formato ${format}`);

            // Simular procesamiento de exportaci√≥n
            await new Promise(resolve => setTimeout(resolve, 1500));

            const exportData = {
                filename: `facturas_arca_${new Date().toISOString().split('T')[0]}.${format}`,
                downloadUrl: `#export-${Date.now()}`, // En producci√≥n, ser√≠a una URL real
                format: format,
                invoiceCount: invoiceIds.length,
                generatedAt: new Date().toISOString(),
                size: Math.floor(Math.random() * 1024) + 512 // KB simulados
            };

            console.log(`‚úÖ Exportaci√≥n completada:`, exportData);
            return exportData;

        } catch (error) {
            console.error('‚ùå Error en exportaci√≥n:', error);
            throw new Error(`Error exportando facturas: ${error.message}`);
        }
    }

    /**
     * Env√≠a una factura a ARCA usando el protocolo MCP
     */
    async sendInvoiceToArca(invoiceData) {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            // Formatear datos seg√∫n protocolo ARCA
            const arcaPayload = this.formatInvoiceForArca(invoiceData);

            // Llamar herramienta MCP para env√≠o a ARCA
            const result = await this.mcpClient.callTool('send_to_arca', {
                ...arcaPayload,
                timestamp: new Date().toISOString()
            });

            return {
                success: true,
                arcaId: result.arcaId,
                message: result.message,
                timestamp: result.timestamp,
                status: 'Enviado'
            };

        } catch (error) {
            console.error('Error enviando factura a ARCA:', error);
            throw new Error(`Error en env√≠o a ARCA: ${error.message}`);
        }
    }

    /**
     * Procesa un lote de facturas para env√≠o a ARCA
     */
    async sendBatchToArca(invoices) {
        if (!this.initialized) {
            await this.initialize();
        }

        const results = [];
        const errors = [];

        for (const invoice of invoices) {
            try {
                const result = await this.sendInvoiceToArca(invoice);
                results.push({
                    invoiceId: invoice.id,
                    ...result
                });
            } catch (error) {
                errors.push({
                    invoiceId: invoice.id,
                    error: error.message
                });
            }
        }

        return {
            success: results.length,
            errors: errors.length,
            results,
            errors
        };
    }

    /**
     * Formatea una factura seg√∫n las especificaciones de ARCA
     */
    formatInvoiceForArca(invoice) {
        return {
            // Campos requeridos por ARCA
            Auth: {
                Token: process.env.ARCA_TOKEN || 'test_token',
                Sign: this.generateSign(invoice),
                Cuit: invoice.cuit.replace(/[-]/g, '') // Remover guiones
            },
            Cmp: {
                Id: this.generateRequestId(),
                Tipo_doc: this.mapInvoiceType(invoice.type),
                Nro_doc: invoice.businessName,
                Tipo_cbte: this.mapInvoiceType(invoice.type),
                Punto_vta: this.extractPuntoVenta(invoice.number),
                Cbte_nro: this.extractInvoiceNumber(invoice.number),
                Imp_total: parseFloat(invoice.total),
                Imp_tot_conc: 0, // Conceptos no gravados
                Imp_neto: this.calculateNetAmount(invoice.total, invoice.type),
                Impto_liq: this.calculateTax(invoice.total, invoice.type),
                Impto_liq_rni: 0,
                Imp_op_ex: 0,
                Imp_perc: 0,
                Imp_iibb: 0,
                Imp_perc_mun: 0,
                Imp_internos: 0,
                Imp_moneda_Id: 'PES', // Pesos argentinos
                Imp_moneda_ctz: 1,
                Fecha_cbte: this.formatDateForArca(invoice.date),
                Fecha_vto_pago: this.formatDateForArca(invoice.date),
                CondicionIVAReceptorId: this.determineIVACondition(invoice.type),
                CanMisMonExt: '',
                Opcionales: []
            },
            Items: this.formatInvoiceItems(invoice)
        };
    }

    /**
     * Genera una firma para la autenticaci√≥n con ARCA
     */
    generateSign(invoice) {
        // En producci√≥n, esto debe usar certificados digitales reales
        const data = `${invoice.cuit}${invoice.number}${invoice.total}`;
        return btoa(data); // Base64 simple para testing
    }

    /**
     * Genera un ID √∫nico para la solicitud
     */
    generateRequestId() {
        return Math.floor(Math.random() * 1000000000);
    }

    /**
     * Mapea tipos de factura del sistema interno a c√≥digos ARCA
     */
    mapInvoiceType(type) {
        const mapping = {
            'A': 1,  // Factura A
            'B': 6,  // Factura B
            'C': 11  // Factura C
        };
        return mapping[type] || 1;
    }

    /**
     * Extrae el punto de venta del n√∫mero de factura
     */
    extractPuntoVenta(invoiceNumber) {
        const parts = invoiceNumber.split('-');
        return parseInt(parts[0]) || 1;
    }

    /**
     * Extrae el n√∫mero de comprobante del n√∫mero de factura
     */
    extractInvoiceNumber(invoiceNumber) {
        const parts = invoiceNumber.split('-');
        return parseInt(parts[1]) || 1;
    }

    /**
     * Calcula el importe neto seg√∫n el tipo de factura
     */
    calculateNetAmount(total, type) {
        if (type === 'A') {
            // Factura A: el total incluye IVA, calcular neto
            return parseFloat((total / 1.21).toFixed(2));
        }
        // Factura B y C: el total ya es el importe final
        return parseFloat(total);
    }

    /**
     * Calcula el IVA seg√∫n el tipo de factura
     */
    calculateTax(total, type) {
        if (type === 'A') {
            const net = this.calculateNetAmount(total, type);
            return parseFloat((net * 0.21).toFixed(2));
        }
        return 0; // Facturas B y C no discriminan IVA
    }

    /**
     * Formatea fecha para ARCA (YYYYMMDD)
     */
    formatDateForArca(dateString) {
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}${month}${day}`;
    }

    /**
     * Determina la condici√≥n de IVA del receptor
     */
    determineIVACondition(invoiceType) {
        // Simplificado: en producci√≥n se debe consultar AFIP
        return invoiceType === 'A' ? 1 : 5; // 1: IVA Responsable Inscripto, 5: Consumidor Final
    }

    /**
     * Formatea los √≠tems de la factura
     */
    formatInvoiceItems(invoice) {
        return [
            {
                Pro_codigo_ncm: '',
                Pro_codigo_sec: '',
                Pro_ds: invoice.description || 'Servicios profesionales',
                Pro_qty: 1,
                Pro_umed: 7, // Unidad
                Pro_precio_uni: this.calculateNetAmount(invoice.total, invoice.type),
                Imp_bonif: 0,
                Imp_total: parseFloat(invoice.total),
                Iva_id: this.getIVAId(invoice.type)
            }
        ];
    }

    /**
     * Obtiene el ID de IVA seg√∫n el tipo de factura
     */
    getIVAId(type) {
        return type === 'A' ? 5 : 3; // 5: 21%, 3: 0%
    }

    /**
     * Consulta el estado de una factura en ARCA
     */
    async checkArcaStatus(invoiceId, arcaId) {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            const result = await this.mcpClient.callTool('check_arca_status', {
                invoiceId,
                arcaId
            });

            return result;
        } catch (error) {
            console.error('Error consultando estado en ARCA:', error);
            throw error;
        }
    }

    /**
     * Reenv√≠a una factura a ARCA (en caso de error)
     */
    async resendToArca(invoice) {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            // Marcar como reenv√≠o
            const invoiceData = {
                ...invoice,
                isRetry: true,
                retryTimestamp: new Date().toISOString()
            };

            return await this.sendInvoiceToArca(invoiceData);
        } catch (error) {
            console.error('Error en reenv√≠o a ARCA:', error);
            throw error;
        }
    }

    /**
     * Obtiene estad√≠sticas de env√≠os a ARCA
     */
    async getArcaStats() {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            const result = await this.mcpClient.callTool('get_arca_stats');
            return result;
        } catch (error) {
            console.error('Error obteniendo estad√≠sticas de ARCA:', error);
            throw error;
        }
    }

    /**
     * Valida una factura antes del env√≠o a ARCA
     */
    validateInvoiceForArca(invoice) {
        const errors = [];

        // Validaciones requeridas
        if (!invoice.cuit || invoice.cuit.length < 11) {
            errors.push('CUIT inv√°lido o faltante');
        }

        if (!invoice.businessName || invoice.businessName.trim().length === 0) {
            errors.push('Raz√≥n social requerida');
        }

        if (!invoice.number || !invoice.number.includes('-')) {
            errors.push('N√∫mero de factura inv√°lido');
        }

        if (!invoice.total || isNaN(parseFloat(invoice.total)) || parseFloat(invoice.total) <= 0) {
            errors.push('Importe total inv√°lido');
        }

        if (!invoice.date || isNaN(new Date(invoice.date).getTime())) {
            errors.push('Fecha inv√°lida');
        }

        if (!['A', 'B', 'C'].includes(invoice.type)) {
            errors.push('Tipo de factura inv√°lido');
        }

        return {
            isValid: errors.length === 0,
            errors
        };
    }

    /**
     * Obtiene la configuraci√≥n de ARCA desde el servidor MCP
     */
    async getArcaConfig() {
        if (!this.initialized) {
            await this.initialize();
        }

        try {
            const result = await this.mcpClient.callTool('get_arca_config');
            return result;
        } catch (error) {
            console.error('Error obteniendo configuraci√≥n de ARCA:', error);
            throw error;
        }
    }
}

// Instancia singleton
let mcpArcaServiceInstance = null;

export const getMCPArcaService = async () => {
    if (!mcpArcaServiceInstance) {
        mcpArcaServiceInstance = new MCPArcaService();
        await mcpArcaServiceInstance.initialize();
    }
    return mcpArcaServiceInstance;
};

export default MCPArcaService;